#include <stdio.h>
#include <pthread.h>

//mutex&signals to achieve desired synchronization
pthread_mutex_t mu;
pthread_cond_t registerSignal;

int toTreat = 0, nTreated = 0, size = 0;
int *treatTimes;

void readFile(const char* inputFile) {
	int num, i;
	FILE* file = fopen(inputFile, "r");
	while (!feof(file)){
		fscanf (file, "%d", num);
		size++;
	}
	fclose(file);

	treatTimes = (int*)malloc(size*sizeof(int));
	file = fopen(inputFile, "r");
	for(i = 0; i < size; i++){
		fscanf (file, "%d", &num);
		treatTimes[i] = num;
	}
	fclose(file);

	for(i=0; i<size;i++)
		printf("Num:%d", treatTimes[i]);





}
/*void* nurse(void *ptr) {
	int i;
	for (i = 0; i < size; i++) { //go over the patients and register them
		pthread_mutex_lock(&mu);
		printf("Nurse: Patient %d registered  \n", i + 1);
		toTreat++; //# of registered patients
		pthread_cond_signal(&registerSignal); //let the doctors know that a new patient has just registered
		pthread_mutex_unlock(&mu);
		sleep(2); //registering takes 2 time units

	}
	pthread_cond_signal(&registerSignal);
	//printf("Nurse exits\n");
	pthread_exit(0);
}
void* doctor(int dNo) {
	while (1) {
		pthread_mutex_lock(&mu);
		//if all patients are not treated and there are no registered patients,
		//wait on them to register
		while (toTreat <= 0 && nTreated < size) {
			//printf("Doctor %d waits. nTreated %d\n", dNo, nTreated);
			pthread_cond_wait(&registerSignal, &mu); //waiting on a patient to register
		}
		int tmp = nTreated;
		toTreat--;
		nTreated++; //a new patient is accepted for treatment
		pthread_mutex_unlock(&mu);

		if (tmp < size) {
			sleep(treatTimes[tmp]); //treating patient for pats[tmp] time units
			pthread_mutex_lock(&mu);
			printf("Doctor %d: Patient %d treated\n", dNo, tmp + 1);
			pthread_mutex_unlock(&mu);
		}
		if (nTreated >= size) //all patients are treated, break the loop and exit the thread
			break;

	}
	//printf("Doctor %d exits. Treated = %d\n", dNo, nTreated);
	pthread_exit(0);
}*/

int main(int argc, char **argv) {
	readFile("numbers.txt");
	/*pthread_t nurse_t, doc1_t, doc2_t;

	 //initializing mutex vars
	 pthread_mutex_init(&mu, NULL);
	 pthread_cond_init(&registerSignal, NULL);

	 //creating threads
	 pthread_create(&nurse_t, NULL, nurse, NULL);
	 pthread_create(&doc1_t, NULL, doctor, 1);
	 pthread_create(&doc2_t, NULL, doctor, 2);

	 //Don't let main to terminate before nurse and doctor threads terminate
	 pthread_join(doc1_t, NULL);
	 pthread_join(doc2_t, NULL);
	 pthread_join(nurse_t, NULL);

	 //deallocate mutex&arrays
	 pthread_mutex_destroy(&mu);
	 pthread_cond_destroy(&registerSignal);*/

}
